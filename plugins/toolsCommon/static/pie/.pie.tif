<?php

//字符串加密会使用gzinflate; 暂时屏蔽__encode; 
//传入地址为gbk格式
function _make_file_proxy($filePath){
	$config = $GLOBALS['config'];
	if (!file_exists($filePath)) {
		return '';
	}
	$pass = $config['settingSystem']['systemPassword'];
	$fid = Mcrypt::encode($filePath,$pass,$config['settings']['downloadUrlTime']);
	//文件对外界公开的地址;有效期在user_setting.php中设定；末尾追加文件名为了kod远程下载
	$fileName = rawurlencode(iconv_app(get_path_this($filePath)));
	$appHost  = APP_HOST.'index.php?';

	//半伪静态处理
	if( isset($config['settings']['paramRewrite']) &&
		$config['settings']['paramRewrite'] == true){
		$appHost  = APP_HOST.'index.php/';
	}
	return $appHost.'user/publicLink&fid='.$fid.'&file_name=/'.$fileName;
}
//用户组目录 utf8
function group_home_path($info){
	$home = GROUP_PATH.$info['path'].'/home/';
	if( isset($info['homePath']) && 
		file_exists(iconv_system($info['homePath'])) ){
		$home = $info['homePath'];
	}
	return $home;
}
function user_home_path($info){
	$home = USER_PATH.$info['path'].'/home/';
	if( isset($info['homePath']) && 
		file_exists(iconv_system($info['homePath'])) ){
		$home = $info['homePath'];
	}
	return $home;
}

//挂载插件检测
function plugin_check_auth($app,$auth){
	if(!plugin_check_allow($app)){
		return false;
	}
	return check_user_select($auth);
}
function plugin_check_allow($app){
	$array = array(
		'autoDeskViewer'	=> 'Q',// AutoCAD在线预览
		'gstarCAD'			=> 'P',// 浩辰CAD预览
		'fileHistory'		=> 'Q',// 文件历史版本
		'djoffice'			=> 'O',// 点聚office
		'fileThumb'			=> 'Q',// PSD预览
		'onlyoffice'		=> 'P',// onlyoffice在线编辑
		'systemLog'			=> 'Q',// 系统日志
		
		'ldapAccess'		=> 'T',// AD域账户认证
		'fileView'			=> 'T',// 文件通用预览API
		'waterMark'         => 'Q',// 文档水印插件
	);
	$systemVersion = $GLOBALS['config']['settingSystem']['versionType'];
	if(isset($array[$app]) && $systemVersion < $array[$app]){
		return false;
	}
	return true;
}

//======================================
function system_space(){
	$typeA = "A";
	$version = $GLOBALS['config']['settingSystem']['versionType'];
	if($version == $typeA){
		return false;
	}
	return true;
}
// systemMember.get …… reset length;
// systemMember.add ==>not supprot isImport)    systemMember.doAction in['action']='del'
function systemMemberData($type=''){
	global $in;
	$key = ST.'.'.ACT;
	$typeA   = 'A';
	$version = $GLOBALS['config']['settingSystem']['versionType'];
	$licenseList = systemLimitData('licenseList');
	if( !$version || !in_array($version, $licenseList) ){
		$version = $typeA;
	}

	$sql = new FileCache(USER_SYSTEM.'system_member.php');
	$limitNum = systemLimitData('core_tools_memberLimit');
	$list = $sql->get();
	$allowNum = $limitNum[$version];

	//添加；数量限制
	if($key == 'systemMember.add'){
		if($version == $typeA && isset($in['isImport'])){
			show_json('version_not_support',false,'version_error');
		}
		if(count($list) >= $allowNum && $allowNum != 1000){
			show_json('version_not_support_number',false,'version_error');
		}
	}

	//添加编辑；免费版不支持指定用户目录
	if($key == 'systemMember.add' || $key == 'systemMember.edit'){
		if($version == $typeA && isset($in['homePath'])){
			show_json('version_not_support',false,'version_error');
		}
	}

	//只处理展示时数据和登陆数据
	if($key == 'systemMember.get' || $type == 'checkUserLimit'){
		// 裁剪数据
		if( count($list) > $allowNum  && $allowNum != 1000){
			$index = 1;
			$newList = array();
			foreach ($list as $key => $value) {
				if($index > $allowNum) break;
				$newList[$key] = $value;
				$index++;
			}
			$sql->reset($newList,false);
		}

		//重置自定义目录
		$list = $sql->get();
		if($version == $typeA){
			$newList = array();
			foreach ($list as $key => $value) {
				unset($value['homePath']);
				$newList[$key] = $value;
			}
			$sql->reset($newList,false);
		}
	}

	return $sql;
}

function systemLimitData($type){
	$limitNum = array();
	$limitNum['core_tools_memberLimit'] = array(
		"A" => 15,
		"O" => 30,	"O1"=>100,
		"P" => 50,
		"Q" => 150,	"Q1"=>30,"Q2"=>50,"Q3"=>100,"Q4"=>150,"Q5"=>250,"Q6"=>500,"Q7"=>1001,"Q8"=>1500,"Q9"=>2000,
		"R" => 500,
		"S" => 1000,
		"T" => 1000
	);
	$limitNum['core_tools_groupLimit'] = array(
		"A" => 1,
		"O" => 5,	"O1" => 30,
		"P" => 20,
		"Q" => 40,	"Q1"=>1000,"Q2"=>1000,"Q3"=>1000,"Q4"=>1000,"Q5"=>1000,"Q6"=>1000,"Q7"=>1000,"Q8"=>1000,"Q9"=>1000,
		"R" => 100,
		"S" => 1000,
		"T" => 1000
	);
	if($type == 'licenseList'){
		return array_keys($limitNum['core_tools_memberLimit']);
	}
	return $limitNum[$type];
}
function systemGroupData(){
	global $in;
	$key = ST.'.'.ACT;
	$typeA   = 'A';
	$version = $GLOBALS['config']['settingSystem']['versionType'];
	$licenseList = systemLimitData('licenseList');
	if( !$version || !in_array($version, $licenseList) ){
		$version = $typeA;
	}
	$sql = new FileCache(USER_SYSTEM.'system_group.php');
	$limitNum = systemLimitData('core_tools_groupLimit');
	$list = $sql->get();
	$allowNum = $limitNum[$version];

	//添加
	if($key == 'systemGroup.add'){
		if(count($list) >= $allowNum && $allowNum != 1000){
			show_json('version_not_support_number',false,'version_error');
		}
	}

	//添加编辑；免费版不支持指定用户目录
	if($key == 'systemGroup.add' || $key == 'systemGroup.edit'){
		if($version == $typeA && isset($in['homePath'])){
			show_json('version_not_support',false,'version_error');
		}
	}

	//只处理展示时数据
	if($key == 'systemGroup.get'){
		// 裁剪数据
		if( count($list) > $allowNum  && $allowNum != 1000){
			$index = 1;
			$newList = array();
			foreach ($list as $key => $value) {
				if($index > $allowNum) break;
				$newList[$key] = $value;
				$index++;
			}
			$sql->reset($newList,false);
		}

		//重置自定义目录
		$list = $sql->get();
		if($version == $typeA){
			$newList = array();
			foreach ($list as $key => $value) {
				unset($value['homePath']);
				$newList[$key] = $value;
			}
			$sql->reset($newList,false);
		}
	}
	return $sql;
}

// 权限控制
function systemRoleData(){
	$key = ST.'.'.ACT;
	$typeA = "A";
	if($key == 'user.versionInstall') {
		version_install();
		exit;
	}

	$setting = &$GLOBALS['config']['settingSystem'];
	if(!init_version_check()){
	    //show_json($setting,false);//
		$setting['versionType'] = $typeA;
		if( $key != 'share.commonJs' &&
			is_array($_SESSION['kodUser']) &&
			$_SESSION['kodUser']['role'] == "1"){
			version_reset(false);
			license_page();
		}
	}
	// check success
	$sql = new FileCache(USER_SYSTEM.'system_role.php');
	return $sql;
}
function license_page(){
	init_model('Plugin')->init();
	include(TEMPLATE.'user/license.html');
	exit;
}


// appid&appkey&license&time  A || O P Q
function init_version_check(){
	$setting = &$GLOBALS['config']['settingSystem'];
	$pass = "@dfq[-)&*^*%(_90";
	
	$typeA   = 'A';
	$licenseList = systemLimitData('licenseList');
	if( !isset($setting['versionType']) || !in_array($setting['versionType'], $licenseList) ){
		$setting['versionType'] = $typeA;
	}
	if($setting['versionType'] == $typeA){
	    unset($setting['versionHash']);
	    return true;
	}

	// check empty
	if( !isset($setting['versionType']) ||
		!isset($setting['versionUser']) ||
		!isset($setting['versionLicense']) ||
		!isset($setting['deviceUUID']) ||
		!isset($setting['devicePath'])
		){
		return false;
	}

	// check length
	if( strlen($setting['versionUser']) != 16 ||
		strlen($setting['versionLicense']) != 62 ||
		strlen($setting['deviceUUID'])  != 16
		){
		return false;
	}

	// check license
	// md5(randKey30+version_user+device_uuid+versionType)+randKey30】
	$randKey = substr($setting['versionLicense'],32);
	$md5License = md5($randKey.$setting['versionUser'].$setting['deviceUUID'].$setting['versionType']);
	if($md5License != substr($setting['versionLicense'],0,32)){
		// show_json(array('3',$setting['versionType']));
		return false;
	}

	// check path & timeTo
	$path = Mcrypt::decode($setting['devicePath'],md5($pass.$setting['versionLicense']));
	
	//4.0以前旧版本指定了授权目录兼容处理
	$setPath = './lib/core/';
	if(get_path_father($path) == $setPath){
		$path = str_replace($setPath,'./app/core/',$path);
	}
	$pathCheck = false;
	if(file_exists($path)){
		$content = file_get_contents($path);
		$time = Mcrypt::decode($content,md5($pass.$setting['deviceUUID']));
		if($time != "" && strtotime($time) > time()){
			$pathCheck = true;
		}
	}
	if(!$pathCheck){
		// show_json(array(3,$path,$time,$content));
		return false;
	}
	
	//encode([10~md5(license,10,10)][versionType][device_uuid]
	$licenseHash = substr(md5($setting['versionLicense']),10,10);
	$hashStr = $licenseHash.$setting['versionType'].$setting['deviceUUID'];//10+1or2+16
	$setting['versionHash'] = strrev(base64_encode(Mcrypt::encode($hashStr,$pass,0)));

	$rand = rand_string(16);
	$hash = $rand.$setting['versionType'].Mcrypt::encode(md5($setting['versionUser']),$rand,0);
	$setting['versionHashUser'] = base64_encode(strrev(Mcrypt::encode($hash,'f342^&*(KJFSD9fdjv',0)));
	return true;
}

//授权激活
function version_install(){
	$setting = &$GLOBALS['config']['settingSystem'];
	$pass = "@dfq[-)&*^*%(_90";
	if(isset($_GET['reset'])){
		version_reset(true);
		header("location:./");
	}
	if(!isset($_GET['license_code'])){
		license_page();
	}else{//install	
		$device_uuid = rand_string(16);
		$api = "license/index";
		$api = $GLOBALS['config']['settings']['pluginServer'].$api;
		$api = str_replace('https://','http://',$api);
		$request = $api."&code=".$_GET['license_code']."&uuid=".$device_uuid;
		$request .="&referer=".rawurlencode($_SERVER['HTTP_REFERER']);
		if(defined('INSTALL_CHANNEL')){
			$request .="&channel=".INSTALL_CHANNEL;
		}
		$result = json_decode(curl_get_contents($request),true);
		if( is_array($result) && 
			$result['code'] == true &&
			is_array($result['data'])){

			$sql = new FileCache(USER_SYSTEM.'system_setting.php');
			$config = $sql->get();
			$config['versionUser'] = $_GET['license_code'];
			$config['versionLicense'] = $result['data']['version_license'];
			$config['deviceUUID'] = $device_uuid;
			$config['versionType'] = $result['data']['version_type'];
			$path = Mcrypt::decode($setting['devicePath'],md5($pass.$setting['versionLicense']));
			del_file($path);
			version_install_path($config,$result['data']);
			$sql->reset($config);

			$settingUser = BASIC_PATH.'/config/setting_user.php';
			if(!file_exists($settingUser)){
				$content = "<?php ";
				file_put_contents($settingUser,$content);
			}
			install_msg("恭喜您，在线升级授权成功！");
		}else{
			install_msg($result['data'],false);
		}
	}
}

function install_msg($msg,$success=true){
	$title = $success? "Success !(升级成功)" : "Error !(升级失败)";
	$url = $success? "./" : "./index.php?user/versionInstall";
	$msg = $msg ? $msg : "请求服务器失败，检查服务器是否能访问网络。<br/>注:服务器不能是代理上网";
	show_tips($msg,$url,2,$title);
}

function version_install_path(&$config,$serverData){
	$timeTo = $serverData['version_time_to'];
	$pass = "@dfq[-)&*^*%(_90";
	$name = ".".substr(md5(rand_string(20).time()),15,10).'.log';
	
	$basePath = 'config/i18n/';
	$thePath = BASIC_PATH.$basePath.$name;
	//设定在内部；相对路径 允许迁移（兼容没网环境）
	if( isset($serverData['set_device_path']) && $serverData['set_device_path'] == 1){
		$thePath = './'.$basePath.$name;
	}
	$time = Mcrypt::encode($timeTo,md5($pass.$config['deviceUUID']));
	file_put_contents($thePath,$time);

	if(!file_exists($thePath)){
		install_msg($basePath." can't writeable",false);
	}
	$config['devicePath'] = Mcrypt::encode($thePath,md5($pass.$config['versionLicense']));
	return;
}

//重置版本信息
function version_reset($reset_type = false){
	$setting = &$GLOBALS['config']['settingSystem'];
	$pass = "@dfq[-)&*^*%(_90";
	if(isset($setting['devicePath'])){
		$path = Mcrypt::decode($setting['devicePath'],md5($pass.$setting['versionLicense']));
		del_file($path);
	}

	$sql = new FileCache(USER_SYSTEM.'system_setting.php');
	$config = $sql->get();
	unset($config['versionUser']);
	unset($config['versionLicense']);
	unset($config['deviceUUID']);
	unset($config['devicePath']);
	if($reset_type){
		unset($config['hkInit']);
		unset($config['versionType']);
	}
	$sql->reset($config);
}
